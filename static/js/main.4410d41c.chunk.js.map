{"version":3,"sources":["store/redux/counter.ts","components/Counter.tsx","hooks/useCounterActions.ts","hooks/useCounter.ts","components/App.tsx","App.tsx","store/saga/counter.ts","store/saga/index.ts","store/redux/index.ts","store/configure.tsx","Root.tsx","reportWebVitals.ts","index.tsx"],"names":["PLUS","MINUS","plus","createAction","minus","plusRandom","plusAfterOneSeconds","actions","status","createReducer","count","state","action","num","payload","Math","max","Counter","counterActions","dispatch","useDispatch","onPlus","useCallback","param","onMinus","onPlusRandom","onPlusAfterOneSeconds","useCounterActions","useSelector","counter","onClick","App","random","className","min","ceil","floor","put","CounterActions","console","error","delay","rootSaga","handleCounter","all","fork","takeEvery","CounterSaga","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","store","createStore","applyMiddleware","run","configure","Root","exact","path","component","App2","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4410d41c.chunk.js","sourcesContent":["import { createAction, ActionType, createReducer } from \"typesafe-actions\";\n\nexport interface IPlus {\n  num?: number;\n}\n\n// Actions\nconst PLUS = \"counter/PLUS\";\nconst MINUS = \"counter/MINUS\";\nconst PLUS_RANDOM = \"counter/PLUS_RANDOM\";\nconst PLUS_AFTER_ONE_SECONDS = \"counter/PLUS_AFTER_ONE_SECONDS\";\n\nexport const plus = createAction(PLUS)<IPlus>();\nexport const minus = createAction(MINUS)();\nexport const plusRandom = createAction(PLUS_RANDOM)();\nexport const plusAfterOneSeconds = createAction(PLUS_AFTER_ONE_SECONDS)();\n\n// Types\nexport const actions = { plus, minus, plusRandom, plusAfterOneSeconds };\ntype CounterAction = ActionType<typeof actions>;\ntype CounterState = {\n  count: number;\n};\n\nconst initialState: CounterState = {\n  count: 0\n};\n\n// Reducer\nconst status = createReducer<CounterState, CounterAction>(initialState, {\n  [PLUS]: (state, action) => {\n    const { num } = action.payload;\n    const { count } = state;\n    const add = num || 1;\n    const _count = count + add;\n    return { count: _count };\n  },\n  [MINUS]: (state, action) => {\n    const { count } = state;\n    const _count = Math.max(count - 1, 0);\n    return { count: _count };\n  }\n});\n\nexport default status;","import React from \"react\";\nimport useCounterActions from \"../hooks/useCounterActions\";\nimport useCounter from \"../hooks/useCounter\";\n\nfunction Counter() {\n  const counterActions = useCounterActions();\n  const count = useCounter().count;\n\n  return (\n    <div>\n      <h1>Counter</h1>\n      <div>{count}</div>\n      <button onClick={() => counterActions.onPlus({})}>PLUS</button>\n      <button onClick={() => counterActions.onMinus()}>MINUS</button>\n      <button onClick={() => counterActions.onPlusRandom()}>PLUS RANDOM</button>\n      <button onClick={() => counterActions.onPlusAfterOneSeconds()}>\n        PLUS AFTER ONE SECONDS\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;\n","import { useDispatch } from \"react-redux\";\nimport { useCallback } from \"react\";\nimport { actions, IPlus } from \"../store/redux/counter\";\n\nexport default function useCounterActions() {\n  const dispatch = useDispatch();\n\n  const onPlus = useCallback((param: IPlus) => dispatch(actions.plus(param)), [\n    dispatch\n  ]);\n  const onMinus = useCallback(() => dispatch(actions.minus()), [dispatch]);\n  const onPlusRandom = useCallback(() => dispatch(actions.plusRandom()), [\n    dispatch\n  ]);\n  const onPlusAfterOneSeconds = useCallback(\n    () => dispatch(actions.plusAfterOneSeconds()),\n    [dispatch]\n  );\n\n  return { onPlus, onMinus, onPlusRandom, onPlusAfterOneSeconds };\n}","import { useSelector } from \"react-redux\";\nimport { RootState } from \"../store/redux\";\n\nexport default function useCounter() {\n  const counter = useSelector((state: RootState) => state.counter);\n  return counter;\n}","import React from \"react\";\nimport Counter from \"./Counter\";\n\nfunction App() {\n  return <Counter />;\n}\n\nexport default App;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const name: Number = 0.3;\n  const tt: Number = Math.random();\n  return (\n    <div className=\"App\">\n      <h1>UI 개발 인턴 - UI연습 블로그 </h1>\n     <h3>1/12 부터 교육 예정</h3>\n     <h5>react / typescript</h5>\n     <h6>{}</h6>\n    </div>\n  );\n}\n\nexport default App;\n\n","import { put, delay } from \"redux-saga/effects\";\nimport * as CounterActions from \"../redux/counter\";\n\nfunction getRandomInt(min: number, max: number) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * plusRandom\n * Counter Store에서 counter 값을 가져와 random 값을 더한 후 저장\n */\n\nexport function* plusRandom() {\n  try {\n    const num = getRandomInt(1, 20);\n    yield put(CounterActions.plus({ num }));\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n/**\n * plusAfterOneSeconds\n * 1초 후 plusRandom 액션 발행\n */\n\nexport function* plusAfterOneSeconds() {\n  try {\n    yield delay(1000);\n    yield put(CounterActions.plusRandom())\n  } catch (error) {\n    console.error(error);\n  }\n}","import { takeEvery, all, fork } from \"redux-saga/effects\";\n\n// Saga\nimport * as CounterSaga from \"./counter\";\n\n// Reducer\nimport * as CounterActions from \"../redux/counter\";\n\nexport default function* rootSaga() {\n    // Root Saga\n    yield all([fork(handleCounter)]);\n}\n\nfunction* handleCounter() {\n    yield takeEvery(\n        CounterActions.plusAfterOneSeconds,\n        CounterSaga.plusAfterOneSeconds\n    );\n    yield takeEvery(CounterActions.plusRandom, CounterSaga.plusRandom);\n}","import counter from \"./counter\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({ counter });\n\nexport default rootReducer;\n\nexport type RootState = ReturnType<typeof rootReducer>;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./saga/index\";\nimport rootReducer from \"./redux/index\";\n\ndeclare global {\n  // tslint:disable-next-line: interface-name\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nconst isDev = process.env.NODE_ENV === \"development\";\nconst devTools = isDev && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\nconst composeEnhancers = devTools || compose;\n\nexport default function configure() {\n  const store = createStore(\n    rootReducer,\n    {}, // pre-loaded state\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n  );\n  sagaMiddleware.run(rootSaga);\n  return store;\n}","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter,Route } from 'react-router-dom';\nimport App from \"./components/App\";\nimport App2 from \"./App\";\nimport configure from \"./store/configure\";\n\nconst store = configure();\n\nfunction Root() {\n    return (\n        <Provider store={store}>\n            <BrowserRouter>\n            <Route exact path=\"/\" component={App2}/>\n            <Route exact path=\"/cntr\" component={App}/>\n            </BrowserRouter>\n        </Provider>\n    );\n}\n\nexport default Root;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Root from \"./Root\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\nreportWebVitals();\n"],"sourceRoot":""}